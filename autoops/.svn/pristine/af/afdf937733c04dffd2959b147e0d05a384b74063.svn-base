
import urllib2, MySQLdb,httplib2,re
from apscheduler.schedulers.background import BackgroundScheduler
import os
conn={
      
         'ENGINE': 'django.db.backends.mysql',
        'name': 'autoops',
        'host':'172.16.21.60',
        'user':'root',
        'passwd':'Root#15',
        'port':'3306'
      }
sfsfs
sfsfjkkjk
def mysql_command(conn,sql_cmd):
        try:
            ret = []
            #print conn['host']
           # print conn['name']
            conn=MySQLdb.connect(host=conn["host"],user=conn["user"],passwd=conn["passwd"],db=conn["name"],port=int(conn["port"]),charset="utf8")
            cursor = conn.cursor()
           # dictfetchall(cursor)
            cursor.execute(sql_cmd)
            return dictfetchall(cursor)
            #conn.commit()
            #cursor.close()
            #conn.close()
        except MySQLdb.Error,e:
            ret.append(e)
def dictfetchall(cursor):
    "Returns all rows from a cursor as a dict"
    desc = cursor.description
    return [
        dict(zip([col[0] for col in desc], row))
        for row in cursor.fetchall()
    ]
    
def mysql_command_insert(conn,sql_cmd):
        try:
            ret = []
            #print conn['host']
           # print conn['name']
            conn=MySQLdb.connect(host=conn["host"],user=conn["user"],passwd=conn["passwd"],db=conn["name"],port=int(conn["port"]),charset="utf8")
            cursor = conn.cursor()
           # dictfetchall(cursor)
            cursor.execute(sql_cmd)
            #sreturn dictfetchall(cursor)
            conn.commit()
            cursor.close()
            conn.close()
        except MySQLdb.Error,e:
            ret.append(e)
import cx_Oracle
oracle_conn={
     'ENGINE': 'django.db.backends.oracle',
        'name': 'monitor',
        'host':'172.16.21.71',
        'user':'monitor',
        'passwd':'M0#ni#tor',
        'port':'1521'
    }
def oracle_command_direct(conn,sql_cmd):
        try:
            print 'entering@!'
            ret = []
            conn_str="{0}/{1}@{2}:{3}/{4}".format(conn['user'],conn['passwd'],conn['host'],conn['port'],conn['name'])


            conn=cx_Oracle.connect(conn_str)
            #print conn
            cursor = conn.cursor()
            #print cursor
            cursor.execute(sql_cmd)
            for row in cursor.fetchall():
                   # print row
                    ret.append(row[0])
        except cx_Oracle.Error,e:
            print e
            print 'error'
        return ret
def oracle_command(conn,sql_cmd):
        try:
            ret = []
            conn_str="{0}/{1}@{2}:{3}/{4}".format(conn['user'],conn['passwd'],conn['host'],conn['port'],conn['name'])
            conn=cx_Oracle.connect(conn_str)
            cursor = conn.cursor()
            cursor.execute(sql_cmd)
            for row in cursor.fetchall():
                ret.append(row)
        except cx_Oracle.Error,e:
            ret.append(e)
        return ret
def oracle_command_update(conn,sql_cmd):
        try:
            ret = []
            conn_str="{0}/{1}@{2}:{3}/{4}".format(conn['user'],conn['passwd'],conn['host'],conn['port'],conn['name'])
            conn=cx_Oracle.connect(conn_str)
            cursor = conn.cursor()

            cursor.execute(sql_cmd)
            conn.commit()
            cursor.close()
            conn.close()
        except cx_Oracle.Error,e:
            ret.append(e)
import time
def update_status():
    import httplib2
    count_1=0
    count_0=0
    htt=httplib2.Http(".cache",timeout=10)
    query_reg_list_sql="select DISTINCT RegName from appregioninfo"
    reg_list=oracle_command_direct(oracle_conn,query_reg_list_sql)
    print reg_list
    file_suc=open('/opt/suc.txt','wd')
    file_fail=open('/opt/fail.txt','wd')
    for item in reg_list:
        #status=0
        reg=item
        sql_query_ip_port="select b.IpAddress,a.HttpPort,a.HealthPage from appregioninfo a,machineinfo b where a.RegName='%s' and a.RegName=b.RegName" %reg
        print sql_query_ip_port
        ip_port_object=oracle_command(oracle_conn,sql_query_ip_port)
        print ip_port_object
        for item in ip_port_object:
            url="http://{0}:{1}/{2}".format(item[0].strip(),item[1],item[2])
            print url
            status=0
            try:
                resp,content=htt.request(url, "GET")
               # time.sleep(1)
            except Exception,e:
                print 'connection fail'
            if re.search(r'success',content):
                status=0
                count_0+=1
                file_suc.write(url+'\n')
            else:
                status=1
		file_fail.write(url+'\n')
                count_1+=1
            sql="update machineinfo a set a.status=%d where exists(select 1 from appregioninfo b where b.HttpPort='%s' and a.IpAddress='%s' and a.regname=b.regname)" %(status,item[1],item[0])
            print sql
            #print status
            print count_1
	    print count_0
	    oracle_command_update(oracle_conn,sql)
    
if __name__ == '__main__':
   # print 'start reg statue!'
   # scheduler = BackgroundScheduler()
   # scheduler.add_job(update_status, 'interval', seconds=40)
   # scheduler.start()

    #print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))

    #try:
        # This is here to simulate application activity (which keeps the main thread alive).
     #   while True:
      #      time.sleep(2)
    #except (KeyboardInterrupt, SystemExit):
     #   scheduler.shutdown()
    update_status()
