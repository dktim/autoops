#-*- coding: utf-8 -*-
from django import forms
from django.shortcuts import render_to_response,render,HttpResponseRedirect,HttpResponse
#from models import AuthUser, GoalNum
from django.contrib.auth import authenticate,login as auth_login,logout as auth_logout
from django.contrib.auth import login,logout
from django.contrib.auth.hashers import make_password#, check_password
from django.http import HttpResponse,HttpResponseRedirect
from django.contrib.auth.models import Permission, User
# from django.contrib.auth.decorators import permission_required
from django.views.decorators.csrf import csrf_exempt , csrf_protect
import datetime
#import simplejson
#import paramiko
from django.views.decorators.csrf import csrf_exempt,csrf_protect
from autoops.oracle import oracle_db_operate
import autoops.settings as settings

class LoginForm(forms.Form):
	username=forms.CharField(label="username/account")
	password=forms.CharField(label="passwd",widget=forms.PasswordInput)
@csrf_exempt
def mylogin(request):
	msg = []
	if request.POST:
		if len(request.POST.get('next')) > 0:
			_next = request.POST.get('next')
		else:
			_next = "/"
		username = request.POST.get('username')
		password = request.POST.get('password')
		
		user = authenticate(username=username, password=password)
		if user is not None:
			if user.is_active:
				auth_login(request, user)
				return HttpResponseRedirect(_next)
			else:
				msg.append("Disabled account")
		else:
			msg.append("Password error")
	return render(request, 'common_service/login.html', {'errors': msg})
	


def login_validate(request, username, password):
    rtvalue = False
    print username,password
    user = authenticate(username=username,password=password)
    print user
    if user is not None:
        if user.is_active:
          auth_login(request, user)
          return True
    print rtvalue 
    return rtvalue


def myprofile(request):
	try:
		user=request.COOKIES['username']
		print user
	except:
		print "except"
		return HttpResponseRedirect('/account/mylogin')
	else:
		return HttpResponseRedirect('/monitor/index',{"user":user})


#def logout(request):
	#response=HttpResponseRedirect("/account/mylogin")
#	response.delete_cookie("username")
	#return response

def mylogout(request):
	logout(request)
	return HttpResponseRedirect("/")


def register(request):
	return HttpResponse("the page is not exist!.")
